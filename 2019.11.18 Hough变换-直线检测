Hough变换-直线检测

1.直角坐标系
  y=ax+b
2.极坐标系参数空间
  ρ=xcosθ+ysinθ
  
今天面试被问到，OpenCV的霍夫变换(Hough Transform)直线检测有哪两种方式？
#参考原文链接：https://blog.csdn.net/index20001/article/details/78299021
  OpenCV中的基本霍夫变换直线检测函数 cv::HoughLines
  OpenCV中的概率霍夫变换直线检测函数 cv::HoughLinesP
  
  霍夫变换检测直线的目的，是找到二值图像中经过足够多数量点的所有直线，当同一直线穿过许多点，便意味着这条线的存在足够明显。

概率霍夫变换在原算法的基础上增加了一些改动，主要是：
1. 不再系统地逐行扫描图像，而是随机挑选（轮廓图像的）前景点，一旦累加器中的某一项交点的票数达到给定的最小值，就搜索轮廓图像在对应直线上的前景点，连成线段（要小于maxLineGap），然后记录线段参数（起终点），最后删除所有经过的点（即使它们并未投过票）。
2. 概率霍夫变换定义了两个额外的参数：一个是可以接受的最小线段长度（minLineLength），另一个是允许组成连续线段的最大像素间隔（maxLineGap），虽然额外步骤增加了算法的复杂度，但由于参与投票的点数有所减少，因此得到了一些补偿。
概率霍夫变换，通过计算点属于直线的概率，提高了算法速度，是标准Hough变换的优化版。

在看张平《OpenCV算法精解-基于python和c++》编著的书中，写到：
标准的Hough直线检测内存消耗比较大，执行时间比较长，所以提出了概率Hough直线检测，它随机地从边缘二值图中选择前景像素点，确定检测直线的两个参数，其本质上还是标准的霍夫直线检测。

一般在直线检测中，使用概率霍夫直线检测。

========================================================================================
宏定义实现sizeof功能
//针对T为一个类型名的情况
#define _sizeof_type(T) (size_t)((T*)0 + 1)

//针对T为一个变量或者数组名的情况
#define _sizeof(T) ((size_t)(&T + 1) - (size_t)(&T))
